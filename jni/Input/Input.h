#ifndef INPUT_H
#define INPUT_H

#include "InputKeys.h"
#include "KeysState.h"
#include "TouchState.h"
#include "AccelerometerState.h"
#include <vector>
#include <Core/Mutex.h>
#include <Scripts/ScriptManager.h>

using namespace std;

//TODO add accelerometer

//! Input subsystem
/*!
  Process events generated by main activity and track state of touch/keys/accelerometer.
  */
class Input
{
public:
    Input();
    virtual ~Input() {}

    //! Initializes subsystem
    virtual bool Initialize();

    //! Releases subsystem
    virtual bool Release();

    //! Process key event
    /*!
      Process key event received from main activity
      \param e event from main activity
      */
    virtual void ProcessKeyEvent(const KeyEvent& e);

    //! Process touch event
    /*!
      Process touch event received from main activity
      \param e event from main activity
      */
    virtual void ProcessTouchEvent(const TouchEvent& e);



    virtual void ProcessAccelerometerEvent(const AccelEvent& event);

    //! Updates information about key/touch state
    /*!
      Should be called when new frame starts, updates state of keys touch based on received events since last frame
      */
    virtual void StartFrame();

    //! Saves keys/touch state of frame
    /*!
      Should be called when frame ends, it allows to detect differences in input between this and new frame eg. key goes down
      */
    virtual void EndFrame();

    //! Returns object managing keys state
    const KeysState* GetKeyState() const;

    //! Returns object managing touch state
    const TouchState* GetTouchState() const;

    const AccelerometerState* GetAccelState() const;

    //! Returns instance of input subsystem
    static Input* get() {return singleton;}

protected:
    static Input* singleton;

private:
    KeysState keyState;
    TouchState touchState;
    AccelerometerState accelerometerState;

    //list of key events to process since last frame
    vector<KeyEvent> pendingKeyEvents;
    //list of touch events since last frame
    vector<TouchEvent> pendingTouchEvents;

    vector<AccelEvent> pendingAccelEvents;
    Mutex mutex;
};

#endif // INPUT_H
